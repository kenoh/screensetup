#!/usr/bin/env python3
import subprocess as sp
import click
import logging as log
import copy
import os
import daemon
import yaml
import jsonschema

#################
# CONFIGURATION #
#################

CONFIG_FILE = '~/.screensetup.yaml'

#################

SCHEMA = {
    "definitions": {
        "displays_setup": {
            "title": "xrandr outputs",
            "type": "object",
            "additionalProperties": {
                "title": "xrandr arguments (names without leading --)",
                "type": ["object", "null"],
                "additionalProperties": {
                    "type": ["string", "null"]
                }
            }
        },
        "setup": {
            "title": "one setup to be used",
            "type": "object",
            "properties": {
                "dpi": { "type": "integer" },
                "displays": {
                    "oneOf": [
                       { "type": "array",
                         "items": { "$ref": "#/definitions/displays_setup" }
                       },
                       { "$ref": "#/definitions/displays_setup" }
                   ]
                },
                "pre": { "type": "string" },
                "post": { "type": "string" },
                "i3workspaces": {
                    "title": "mapping of workspace to output",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        }
    },
    "type": "object",
    "properties": {
        "default_setup": {
            "$ref": "#/definitions/setup"
        },
        "setups": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/definitions/setup"
            }
        }
    },
    "required": ["setups"]
}

log.basicConfig(level=log.DEBUG)


def validate_config(config):
    return jsonschema.validate(config, SCHEMA) is None


def read_config():
    filename = os.path.expanduser(CONFIG_FILE)
    with open(filename, 'r') as f:
        config = yaml.safe_load(f.read())
        return config if validate_config(config) else False


def xrandr_format(display, opts, dpi):
    # sum(x, []) flattens the [[]] to []
    rendered = sum([[f'--{k}', v] for k, v in opts.items()], [])
    # drop None, as it appears when no value for an opt is passed
    rendered = [x for x in rendered if x is not None]
    # maybe add DPI
    if dpi:
        rendered += ['--dpi', str(dpi)]
    return ['--output', display] + rendered


def set_dpi(dpi, dry_run):
    text = f"""Xft/DPI {dpi * 1024}
Gdk/WindowScalingFactor {round(dpi / 96.0)}
Gdk/UnscaledDPI {int(dpi * 1024 / round(dpi / 96.0))}

Xft/Antialias 1
Xft/HintStyle "hintfull"
Xft/Hinting 1
Xft/RGBA "rgb"
"""
    filename = '~/.xsettingsd'
    if not dry_run:
        with open(os.path.expanduser(filename), 'w') as f:
            f.write(text)
    else:
        log.info(f'Would write following into {filename}:\n{text}') 

    cmd = ['pkill', '-HUP', 'xsettingsd']
    if not dry_run:
        try:
            sp.run(cmd, check=True)
        except sp.CalledProcessError:
            with daemon.DaemonContext():
                sp.run(['xsettingsd'])
                exit()
    else:
        log.info(f'Would run: {cmd}')

    cmd = ['xrdb', '-merge']
    text = f'Xft.dpi: {dpi}\n'
    if not dry_run:
        sp.run(cmd, text=True, input=text)
    else:
        log.info(f'Would run: {cmd}')
        log.info(f'... with input: {text}')

    cmd = ['i3-msg', 'restart']
    if not dry_run:
        sp.run(cmd)
    else:
        log.info(f'Would run: {cmd}')

    cmd = [os.path.expanduser('~/bin/xinit.sh')]
    if not dry_run:
        sp.run(cmd)
    else:
        log.info(f'Would run: {cmd}')


def run_xrandr(ds, dpi, config, dry_run):
    log.debug(f'run_xrandr:ds :: {ds}')
    log.debug(f'run_xrandr:dpi :: {dpi}')
    log.debug(f'run_xrandr:config :: {config}')
    log.debug(f'run_xrandr:dry_run :: {dry_run}')

    def flatten(list_of_lists):
        return [inner for outer in list_of_lists for inner in outer]

    # bring in defaults
    for k, v in ds.items():
        defs = {'mode': '1920x1080', 'panning': '0x0',
                **(config['default_setup']['displays'].get(k, {})),
                **(v or {})}
        log.debug(f'run_xrandr:ds[{k}] <= {defs}')
        ds[k] = defs

    # xrandr
    all_displays = os.popen("xrandr | grep 'connected' | awk {'print $1'}").read().splitlines()
    missing_displays = set(all_displays) - set(ds.keys())
    missing = flatten([xrandr_format(d, {'off': None}, None) for d in missing_displays])
    setting = flatten([xrandr_format(d, opts, dpi) for d, opts in ds.items()])
    cmd = ['xrandr'] + missing + setting
    if not dry_run:
        try:
            log.info(f'Running: {" ".join(cmd)}')
            sp.run(cmd, check=True)
        except sp.CalledProcessError:
            log.error('Running xrandr failed.')
    else:
        log.info(f'Would run: {cmd}')


def maybe_run_hook(profile, hook_name, dry_run):
    if hook_name in profile:
        if dry_run:
            log.info(f'Would run hook `{hook_name}` with `sh -c`: {profile[hook_name]}')
        else:
            sp.run(['sh', '-c', profile[hook_name]])
    else:
        log.debug(f'Ignoring missing hook `{hook_name}`.')


def enable_profile(profile, config, dry_run):
    try:
        p = copy.deepcopy(config['setups'][profile])
    except KeyError:
        log.error(f'Unknown profile: {profile}. Use `list` to list available profiles.')
        exit(1)

    log.debug('Processing pre-hook')
    maybe_run_hook(p, 'pre', dry_run)

    # default dpi
    if 'dpi' not in p:
        p['dpi'] = 96

    # xrandr
    log.debug('Processing xrandr')
    dss = [p['displays']] if type(p['displays']) == dict else p['displays']
    for q in dss:
        run_xrandr(q, p['dpi'], config, dry_run)

    # workspaces
    log.debug('Processing i3workspaces')
    kw = 'i3workspaces'
    if kw not in p:
        p[kw] = {}
    for w, d in p[kw].items():
        cmd = ['i3-msg', f'workspace {w} ; move workspace to output {d}']
        if not dry_run:
            sp.run(cmd)
        else:
            log.info(f'Would run: {cmd}')

    # hidpi
    log.debug('Processing hidpi')
    log.info(f'Setting DPI to {p["dpi"]}.')
    set_dpi(p['dpi'], dry_run)

    log.debug('Processing post-hook')
    maybe_run_hook(p, 'post', dry_run)


def list_profiles():
    return read_config()['setups'].keys()


def autocomplete_profiles(ctx, args, incomplete):
    return [ k for k in list_profiles() if incomplete in k ]


@click.group()
def cli():
    pass


@cli.command('list')
def cli_list_profiles():
    print('\n'.join(list_profiles()))


@cli.command('set')
@click.argument('profile', autocompletion=autocomplete_profiles)
@click.option('-n', '--dry-run', is_flag=True)
def cli_set_profile(profile, dry_run):
    config = read_config()
    enable_profile(profile, config, dry_run)


@cli.command('set-dpi')
@click.argument('dpi')
def cli_dpi(dpi):
    set_dpi(int(dpi))


@cli.command('validate-config', help='If valid, prints parsed config')
def cli_validate_config():
    config = read_config()
    validate_config(config)
    print(yaml.dump(config))


if __name__ == '__main__':
    cli()
